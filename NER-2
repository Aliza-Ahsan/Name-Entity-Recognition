{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4361,"sourceType":"datasetVersion","datasetId":1014}],"dockerImageVersionId":30886,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Using Word2Vec","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:11.961307Z","iopub.execute_input":"2025-02-17T09:28:11.961793Z","iopub.status.idle":"2025-02-17T09:28:12.539650Z","shell.execute_reply.started":"2025-02-17T09:28:11.961751Z","shell.execute_reply":"2025-02-17T09:28:12.538395Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/entity-annotated-corpus/ner.csv\n/kaggle/input/entity-annotated-corpus/ner_dataset.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"%matplotlib inline\nimport matplotlib.pyplot as plt\nnp.random.seed(0)\nplt.style.use(\"ggplot\")\n\nimport tensorflow as tf\nprint('Tensorflow version:', tf.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:13.585488Z","iopub.execute_input":"2025-02-17T09:28:13.586263Z","iopub.status.idle":"2025-02-17T09:28:29.712756Z","shell.execute_reply.started":"2025-02-17T09:28:13.586221Z","shell.execute_reply":"2025-02-17T09:28:29.711553Z"}},"outputs":[{"name":"stdout","text":"Tensorflow version: 2.17.1\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"print(os.listdir('../input'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:29.714119Z","iopub.execute_input":"2025-02-17T09:28:29.714895Z","iopub.status.idle":"2025-02-17T09:28:29.721675Z","shell.execute_reply.started":"2025-02-17T09:28:29.714861Z","shell.execute_reply":"2025-02-17T09:28:29.720359Z"}},"outputs":[{"name":"stdout","text":"['entity-annotated-corpus']\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# Distribution graphs (histogram/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) / nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:29.724312Z","iopub.execute_input":"2025-02-17T09:28:29.724733Z","iopub.status.idle":"2025-02-17T09:28:29.762311Z","shell.execute_reply.started":"2025-02-17T09:28:29.724704Z","shell.execute_reply":"2025-02-17T09:28:29.761131Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:29.763975Z","iopub.execute_input":"2025-02-17T09:28:29.764418Z","iopub.status.idle":"2025-02-17T09:28:29.783880Z","shell.execute_reply.started":"2025-02-17T09:28:29.764371Z","shell.execute_reply":"2025-02-17T09:28:29.782671Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:29.785099Z","iopub.execute_input":"2025-02-17T09:28:29.785674Z","iopub.status.idle":"2025-02-17T09:28:29.808740Z","shell.execute_reply.started":"2025-02-17T09:28:29.785633Z","shell.execute_reply":"2025-02-17T09:28:29.807376Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"## 1. Dataset Preprocessing","metadata":{}},{"cell_type":"code","source":"nRowsRead = None # specify 'None' if want to read whole file\n# ner_dataset.csv may have more rows in reality, but we are only loading/previewing the first 1000 rows\ndf2 = pd.read_csv('/kaggle/input/entity-annotated-corpus/ner_dataset.csv', delimiter=',', nrows = nRowsRead, encoding='cp1252')\ndf2.dataframeName = 'ner_dataset.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:29.809551Z","iopub.execute_input":"2025-02-17T09:28:29.809934Z","iopub.status.idle":"2025-02-17T09:28:30.649953Z","shell.execute_reply.started":"2025-02-17T09:28:29.809907Z","shell.execute_reply":"2025-02-17T09:28:30.648347Z"}},"outputs":[{"name":"stdout","text":"There are 1048575 rows and 4 columns\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"df2.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:30.650767Z","iopub.execute_input":"2025-02-17T09:28:30.651074Z","iopub.status.idle":"2025-02-17T09:28:30.677087Z","shell.execute_reply.started":"2025-02-17T09:28:30.651048Z","shell.execute_reply":"2025-02-17T09:28:30.675921Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"    Sentence #           Word  POS    Tag\n0  Sentence: 1      Thousands  NNS      O\n1          NaN             of   IN      O\n2          NaN  demonstrators  NNS      O\n3          NaN           have  VBP      O\n4          NaN        marched  VBN      O\n5          NaN        through   IN      O\n6          NaN         London  NNP  B-geo\n7          NaN             to   TO      O\n8          NaN        protest   VB      O\n9          NaN            the   DT      O","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sentence #</th>\n      <th>Word</th>\n      <th>POS</th>\n      <th>Tag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Sentence: 1</td>\n      <td>Thousands</td>\n      <td>NNS</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>of</td>\n      <td>IN</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>demonstrators</td>\n      <td>NNS</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>have</td>\n      <td>VBP</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>marched</td>\n      <td>VBN</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>through</td>\n      <td>IN</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>NaN</td>\n      <td>London</td>\n      <td>NNP</td>\n      <td>B-geo</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>NaN</td>\n      <td>to</td>\n      <td>TO</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>NaN</td>\n      <td>protest</td>\n      <td>VB</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>NaN</td>\n      <td>the</td>\n      <td>DT</td>\n      <td>O</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"print('Label distribution Training set:')\nprint(df2['Tag'].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:30.679663Z","iopub.execute_input":"2025-02-17T09:28:30.680004Z","iopub.status.idle":"2025-02-17T09:28:30.752385Z","shell.execute_reply.started":"2025-02-17T09:28:30.679964Z","shell.execute_reply":"2025-02-17T09:28:30.751050Z"}},"outputs":[{"name":"stdout","text":"Label distribution Training set:\nTag\nO        887908\nB-geo     37644\nB-tim     20333\nB-org     20143\nI-per     17251\nB-per     16990\nI-org     16784\nB-gpe     15870\nI-geo      7414\nI-tim      6528\nB-art       402\nB-eve       308\nI-art       297\nI-eve       253\nB-nat       201\nI-gpe       198\nI-nat        51\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"df2.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:30.753864Z","iopub.execute_input":"2025-02-17T09:28:30.754290Z","iopub.status.idle":"2025-02-17T09:28:30.974265Z","shell.execute_reply.started":"2025-02-17T09:28:30.754246Z","shell.execute_reply":"2025-02-17T09:28:30.973190Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Sentence #    1000616\nWord               10\nPOS                 0\nTag                 0\ndtype: int64"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"# Looking at the dataset here we will use ffill feature to fill the null values.\n#Forward-fills missing values in the Sentence # column.\n#Ensures every word is correctly assigned to a sentence.\ndf=df2.fillna(method='ffill')\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:30.979827Z","iopub.execute_input":"2025-02-17T09:28:30.980196Z","iopub.status.idle":"2025-02-17T09:28:31.595263Z","shell.execute_reply.started":"2025-02-17T09:28:30.980165Z","shell.execute_reply":"2025-02-17T09:28:31.594203Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-12-50e2ff2a5196>:4: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  df=df2.fillna(method='ffill')\n","output_type":"stream"},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"    Sentence #           Word  POS Tag\n0  Sentence: 1      Thousands  NNS   O\n1  Sentence: 1             of   IN   O\n2  Sentence: 1  demonstrators  NNS   O\n3  Sentence: 1           have  VBP   O\n4  Sentence: 1        marched  VBN   O","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sentence #</th>\n      <th>Word</th>\n      <th>POS</th>\n      <th>Tag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Sentence: 1</td>\n      <td>Thousands</td>\n      <td>NNS</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Sentence: 1</td>\n      <td>of</td>\n      <td>IN</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sentence: 1</td>\n      <td>demonstrators</td>\n      <td>NNS</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Sentence: 1</td>\n      <td>have</td>\n      <td>VBP</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Sentence: 1</td>\n      <td>marched</td>\n      <td>VBN</td>\n      <td>O</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:32.740189Z","iopub.execute_input":"2025-02-17T09:28:32.740522Z","iopub.status.idle":"2025-02-17T09:28:32.963801Z","shell.execute_reply.started":"2025-02-17T09:28:32.740495Z","shell.execute_reply":"2025-02-17T09:28:32.962545Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"Sentence #    0\nWord          0\nPOS           0\nTag           0\ndtype: int64"},"metadata":{}}],"execution_count":13},{"cell_type":"markdown","source":"## 2. Extracting Words and Tags","metadata":{}},{"cell_type":"code","source":"n_tags=df['Tag'].nunique()\nn_tags","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:29:37.255428Z","iopub.execute_input":"2025-02-17T09:29:37.255886Z","iopub.status.idle":"2025-02-17T09:29:37.319096Z","shell.execute_reply.started":"2025-02-17T09:29:37.255847Z","shell.execute_reply":"2025-02-17T09:29:37.317839Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"17"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"n_words=df['Word'].nunique()\nn_words","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:44.920867Z","iopub.execute_input":"2025-02-17T09:28:44.921252Z","iopub.status.idle":"2025-02-17T09:28:45.041254Z","shell.execute_reply.started":"2025-02-17T09:28:44.921224Z","shell.execute_reply":"2025-02-17T09:28:45.040141Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"35177"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"words=list(set(df['Word']))\nn_words=len(words)\ntags=list(set(df['Tag']))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:28:45.961138Z","iopub.execute_input":"2025-02-17T09:28:45.961482Z","iopub.status.idle":"2025-02-17T09:28:46.190238Z","shell.execute_reply.started":"2025-02-17T09:28:45.961456Z","shell.execute_reply":"2025-02-17T09:28:46.189046Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"words[10]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:29:42.020847Z","iopub.execute_input":"2025-02-17T09:29:42.021218Z","iopub.status.idle":"2025-02-17T09:29:42.028027Z","shell.execute_reply.started":"2025-02-17T09:29:42.021187Z","shell.execute_reply":"2025-02-17T09:29:42.026671Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"'Adilgerei'"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"n_tags=len(tags)\nn_tags","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:30:04.860795Z","iopub.execute_input":"2025-02-17T09:30:04.861170Z","iopub.status.idle":"2025-02-17T09:30:04.867544Z","shell.execute_reply.started":"2025-02-17T09:30:04.861141Z","shell.execute_reply":"2025-02-17T09:30:04.866447Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"17"},"metadata":{}}],"execution_count":19},{"cell_type":"markdown","source":"## 3. Converting data into sentences","metadata":{}},{"cell_type":"code","source":"class GetSentence(object):\n    def __init__(self, data):\n        self.n_sentence=1\n        self.data=data\n        self.empty = False\n        function=lambda d:[(w, p, t) for w, p, t in zip(d[\"Word\"].values.tolist(),\n                                                        d[\"POS\"].values.tolist(),\n                                                        d[\"Tag\"].values.tolist())]\n        \n        self.group_sent = self.data.groupby(\"Sentence #\").apply(function)\n        self.all_sentences = [d for d in self.group_sent] ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:30:06.680904Z","iopub.execute_input":"2025-02-17T09:30:06.681232Z","iopub.status.idle":"2025-02-17T09:30:06.687031Z","shell.execute_reply.started":"2025-02-17T09:30:06.681207Z","shell.execute_reply":"2025-02-17T09:30:06.685979Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"get=GetSentence(df)\nsentences=get.all_sentences","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:30:07.773873Z","iopub.execute_input":"2025-02-17T09:30:07.774329Z","iopub.status.idle":"2025-02-17T09:30:13.104098Z","shell.execute_reply.started":"2025-02-17T09:30:07.774285Z","shell.execute_reply":"2025-02-17T09:30:13.102678Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-20-afd3a31f9fc4>:10: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  self.group_sent = self.data.groupby(\"Sentence #\").apply(function)\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"sentences[0]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:30:13.105816Z","iopub.execute_input":"2025-02-17T09:30:13.106264Z","iopub.status.idle":"2025-02-17T09:30:13.114428Z","shell.execute_reply.started":"2025-02-17T09:30:13.106226Z","shell.execute_reply":"2025-02-17T09:30:13.113063Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"[('Thousands', 'NNS', 'O'),\n ('of', 'IN', 'O'),\n ('demonstrators', 'NNS', 'O'),\n ('have', 'VBP', 'O'),\n ('marched', 'VBN', 'O'),\n ('through', 'IN', 'O'),\n ('London', 'NNP', 'B-geo'),\n ('to', 'TO', 'O'),\n ('protest', 'VB', 'O'),\n ('the', 'DT', 'O'),\n ('war', 'NN', 'O'),\n ('in', 'IN', 'O'),\n ('Iraq', 'NNP', 'B-geo'),\n ('and', 'CC', 'O'),\n ('demand', 'VB', 'O'),\n ('the', 'DT', 'O'),\n ('withdrawal', 'NN', 'O'),\n ('of', 'IN', 'O'),\n ('British', 'JJ', 'B-gpe'),\n ('troops', 'NNS', 'O'),\n ('from', 'IN', 'O'),\n ('that', 'DT', 'O'),\n ('country', 'NN', 'O'),\n ('.', '.', 'O')]"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"len(sentences)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:30:13.116275Z","iopub.execute_input":"2025-02-17T09:30:13.116690Z","iopub.status.idle":"2025-02-17T09:30:13.136408Z","shell.execute_reply.started":"2025-02-17T09:30:13.116653Z","shell.execute_reply":"2025-02-17T09:30:13.135202Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"47959"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"maxl = max([len(s) for s in sentences])\nprint ('Maximum sequence length in the list of sentences:', maxl)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:30:22.421678Z","iopub.execute_input":"2025-02-17T09:30:22.422070Z","iopub.status.idle":"2025-02-17T09:30:22.439032Z","shell.execute_reply.started":"2025-02-17T09:30:22.422024Z","shell.execute_reply":"2025-02-17T09:30:22.437963Z"}},"outputs":[{"name":"stdout","text":"Maximum sequence length in the list of sentences: 104\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"## 4. Create word and tag indexing","metadata":{}},{"cell_type":"code","source":"w_index={w:i for i,w in enumerate(words)}\nt_index={t:j for j,t in enumerate(tags)}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:31:08.705468Z","iopub.execute_input":"2025-02-17T09:31:08.705950Z","iopub.status.idle":"2025-02-17T09:31:08.721938Z","shell.execute_reply.started":"2025-02-17T09:31:08.705915Z","shell.execute_reply":"2025-02-17T09:31:08.720754Z"}},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":"## 4. Train word2vec model","metadata":{}},{"cell_type":"code","source":"from gensim.models import Word2Vec\n\n# Prepare the dataset for Word2Vec training (list of tokenized sentences)\nsentences_w2v = [[w[0] for w in s] for s in sentences]  # Extract words from your dataset\n\n# Train a Word2Vec model\nword2vec_model = Word2Vec(sentences=sentences_w2v, vector_size=100, window=5, min_count=1, workers=4)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:31:54.026400Z","iopub.execute_input":"2025-02-17T09:31:54.026890Z","iopub.status.idle":"2025-02-17T09:32:29.628039Z","shell.execute_reply.started":"2025-02-17T09:31:54.026853Z","shell.execute_reply":"2025-02-17T09:32:29.626924Z"}},"outputs":[],"execution_count":26},{"cell_type":"markdown","source":"## 5. Convert labels into indixes and apply padding","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.utils import to_categorical","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:32:51.681112Z","iopub.execute_input":"2025-02-17T09:32:51.681908Z","iopub.status.idle":"2025-02-17T09:32:51.766381Z","shell.execute_reply.started":"2025-02-17T09:32:51.681869Z","shell.execute_reply":"2025-02-17T09:32:51.765288Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"maxl # This is the length of longest sequence in the list of sentences. So this should be our size of max_padding\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:32:56.401068Z","iopub.execute_input":"2025-02-17T09:32:56.401416Z","iopub.status.idle":"2025-02-17T09:32:56.408329Z","shell.execute_reply.started":"2025-02-17T09:32:56.401389Z","shell.execute_reply":"2025-02-17T09:32:56.406876Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"104"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"X=[[w_index[w[0]]for w in s]for s in sentences]\n#Converts each word in a sentence into its corresponding index.","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:32:58.800246Z","iopub.execute_input":"2025-02-17T09:32:58.800641Z","iopub.status.idle":"2025-02-17T09:32:59.488028Z","shell.execute_reply.started":"2025-02-17T09:32:58.800611Z","shell.execute_reply":"2025-02-17T09:32:59.486928Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"X=pad_sequences(maxlen=maxl,padding='post',sequences=X)\n#Pads sentences to maxl length using post-padding (adds zeros at the end).\nX","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:33:01.060390Z","iopub.execute_input":"2025-02-17T09:33:01.060750Z","iopub.status.idle":"2025-02-17T09:33:01.256237Z","shell.execute_reply.started":"2025-02-17T09:33:01.060722Z","shell.execute_reply":"2025-02-17T09:33:01.255077Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"array([[20519, 14579, 16395, ...,     0,     0,     0],\n       [17905, 32474, 32985, ...,     0,     0,     0],\n       [21681, 11623, 29553, ...,     0,     0,     0],\n       ...,\n       [27075, 17352, 21776, ...,     0,     0,     0],\n       [34752, 16251,  5470, ...,     0,     0,     0],\n       [22958, 13701, 12459, ...,     0,     0,     0]], dtype=int32)"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"Y = [[t_index[w[2]] for w in s] for s in sentences]\n#Converts NER tags to indexed format.","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:33:27.240544Z","iopub.execute_input":"2025-02-17T09:33:27.240994Z","iopub.status.idle":"2025-02-17T09:33:27.355515Z","shell.execute_reply.started":"2025-02-17T09:33:27.240963Z","shell.execute_reply":"2025-02-17T09:33:27.354486Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"Y=pad_sequences(maxlen=maxl,padding='post',sequences=Y)\n#Pads labels similarly.\nY[1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:33:29.740209Z","iopub.execute_input":"2025-02-17T09:33:29.740544Z","iopub.status.idle":"2025-02-17T09:33:29.949847Z","shell.execute_reply.started":"2025-02-17T09:33:29.740517Z","shell.execute_reply":"2025-02-17T09:33:29.948687Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"array([11, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  2, 15,\n       15, 15,  7, 15, 15, 15, 15, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n        0,  0], dtype=int32)"},"metadata":{}}],"execution_count":32},{"cell_type":"markdown","source":"### Convert labels into One-Hot Encoding","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.utils import to_categorical\n\nY = to_categorical(Y, num_classes=n_tags)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:34:59.801340Z","iopub.execute_input":"2025-02-17T09:34:59.801753Z","iopub.status.idle":"2025-02-17T09:35:00.485307Z","shell.execute_reply.started":"2025-02-17T09:34:59.801722Z","shell.execute_reply":"2025-02-17T09:35:00.483886Z"}},"outputs":[],"execution_count":33},{"cell_type":"markdown","source":"## 6. Splitting train-test split","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.1,random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:35:51.521264Z","iopub.execute_input":"2025-02-17T09:35:51.521679Z","iopub.status.idle":"2025-02-17T09:35:52.027100Z","shell.execute_reply.started":"2025-02-17T09:35:51.521645Z","shell.execute_reply":"2025-02-17T09:35:52.025945Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"print(x_train.shape, y_train.shape)\nprint()\nprint(x_test.shape, y_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:37:02.716140Z","iopub.execute_input":"2025-02-17T09:37:02.716505Z","iopub.status.idle":"2025-02-17T09:37:02.724155Z","shell.execute_reply.started":"2025-02-17T09:37:02.716477Z","shell.execute_reply":"2025-02-17T09:37:02.722733Z"}},"outputs":[{"name":"stdout","text":"(43163, 104) (43163, 104, 17)\n\n(4796, 104) (4796, 104, 17)\n","output_type":"stream"}],"execution_count":37},{"cell_type":"markdown","source":"## 7. Create an Embedding Matrix","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\nembedding_dim = 100  # If using a pretrained model like Google News, set to 300\n\n# Create an embedding matrix\nembedding_matrix = np.zeros((n_words, embedding_dim))  # Initialize a matrix with zeros\n\nfor word, i in w_index.items():  \n    if word in word2vec_model.wv:  # Check if word exists in Word2Vec vocabulary\n        embedding_matrix[i] = word2vec_model.wv[word]  # Assign its word vector\n    else:\n        embedding_matrix[i] = np.random.uniform(-0.01, 0.01, embedding_dim)  # Assign random vector if word is not found\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:38:01.381537Z","iopub.execute_input":"2025-02-17T09:38:01.382021Z","iopub.status.idle":"2025-02-17T09:38:01.529813Z","shell.execute_reply.started":"2025-02-17T09:38:01.381980Z","shell.execute_reply":"2025-02-17T09:38:01.528607Z"}},"outputs":[],"execution_count":38},{"cell_type":"markdown","source":"## 8. BiLSTM Model","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.layers import Embedding, LSTM, Dense, TimeDistributed, SpatialDropout1D, Bidirectional\nfrom tensorflow.keras import Model, Input\n\ninput_layer = Input(shape=(maxl,))\n\n# Load Word2Vec embeddings\nembedding_layer = Embedding(input_dim=n_words,\n                            output_dim=embedding_dim,\n                            input_length=maxl,\n                            weights=[embedding_matrix],\n                            trainable=False)(input_layer)\n\ndropout_layer = SpatialDropout1D(0.1)(embedding_layer)\nlstm_layer = Bidirectional(LSTM(units=150, return_sequences=True, recurrent_dropout=0.1))(dropout_layer)\noutput_layer = TimeDistributed(Dense(n_tags, activation=\"softmax\"))(lstm_layer)\n\nmodel = Model(input_layer, output_layer)\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nmodel.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:38:44.391096Z","iopub.execute_input":"2025-02-17T09:38:44.391463Z","iopub.status.idle":"2025-02-17T09:38:44.634214Z","shell.execute_reply.started":"2025-02-17T09:38:44.391436Z","shell.execute_reply":"2025-02-17T09:38:44.633271Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m, \u001b[38;5;34m100\u001b[0m)            │       \u001b[38;5;34m3,517,700\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ spatial_dropout1d (\u001b[38;5;33mSpatialDropout1D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m, \u001b[38;5;34m100\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ bidirectional (\u001b[38;5;33mBidirectional\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m, \u001b[38;5;34m300\u001b[0m)            │         \u001b[38;5;34m301,200\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ time_distributed (\u001b[38;5;33mTimeDistributed\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m, \u001b[38;5;34m17\u001b[0m)             │           \u001b[38;5;34m5,117\u001b[0m │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">3,517,700</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ spatial_dropout1d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SpatialDropout1D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ bidirectional (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">301,200</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ time_distributed (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">17</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">5,117</span> │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m3,824,017\u001b[0m (14.59 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,824,017</span> (14.59 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m306,317\u001b[0m (1.17 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">306,317</span> (1.17 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m3,517,700\u001b[0m (13.42 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,517,700</span> (13.42 MB)\n</pre>\n"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:39:20.696209Z","iopub.execute_input":"2025-02-17T09:39:20.696637Z","iopub.status.idle":"2025-02-17T09:39:20.706142Z","shell.execute_reply.started":"2025-02-17T09:39:20.696601Z","shell.execute_reply":"2025-02-17T09:39:20.705168Z"}},"outputs":[],"execution_count":40},{"cell_type":"markdown","source":"## 9. Train the Model","metadata":{"execution":{"iopub.status.busy":"2025-02-17T08:54:53.522076Z","iopub.execute_input":"2025-02-17T08:54:53.522398Z","iopub.status.idle":"2025-02-17T08:54:53.768670Z","shell.execute_reply.started":"2025-02-17T08:54:53.522376Z","shell.execute_reply":"2025-02-17T08:54:53.767883Z"}}},{"cell_type":"code","source":"pip install livelossplot\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:41:05.472449Z","iopub.execute_input":"2025-02-17T09:41:05.472876Z","iopub.status.idle":"2025-02-17T09:41:11.562700Z","shell.execute_reply.started":"2025-02-17T09:41:05.472841Z","shell.execute_reply":"2025-02-17T09:41:11.561252Z"}},"outputs":[{"name":"stdout","text":"Collecting livelossplot\n  Downloading livelossplot-0.5.6-py3-none-any.whl.metadata (8.9 kB)\nRequirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from livelossplot) (3.7.5)\nRequirement already satisfied: bokeh in /usr/local/lib/python3.10/dist-packages (from livelossplot) (3.6.2)\nRequirement already satisfied: Jinja2>=2.9 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (3.1.4)\nRequirement already satisfied: contourpy>=1.2 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (1.3.1)\nRequirement already satisfied: numpy>=1.16 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (1.26.4)\nRequirement already satisfied: packaging>=16.8 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (24.2)\nRequirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (2.2.3)\nRequirement already satisfied: pillow>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (11.0.0)\nRequirement already satisfied: PyYAML>=3.10 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (6.0.2)\nRequirement already satisfied: tornado>=6.2 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (6.3.3)\nRequirement already satisfied: xyzservices>=2021.09.1 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (2024.9.0)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (4.55.3)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (1.4.7)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (3.2.0)\nRequirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (2.9.0.post0)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=2.9->bokeh->livelossplot) (3.0.2)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (2.4.1)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->bokeh->livelossplot) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->bokeh->livelossplot) (2025.1)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->livelossplot) (1.17.0)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.16->bokeh->livelossplot) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.16->bokeh->livelossplot) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.16->bokeh->livelossplot) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.16->bokeh->livelossplot) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.16->bokeh->livelossplot) (2024.2.0)\nDownloading livelossplot-0.5.6-py3-none-any.whl (23 kB)\nInstalling collected packages: livelossplot\nSuccessfully installed livelossplot-0.5.6\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":44},{"cell_type":"code","source":"from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom livelossplot.tf_keras import PlotLossesCallback\nearly_stop = EarlyStopping(monitor='val_accuracy', patience=1, verbose=1, mode='max', restore_best_weights=True)\ncallbacks = [PlotLossesCallback(), early_stop]\n\nhistory = model.fit(x_train, np.array(y_train), validation_split=0.2, batch_size=32, epochs=2, verbose=1, callbacks=callbacks)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:41:15.384529Z","iopub.execute_input":"2025-02-17T09:41:15.385015Z","iopub.status.idle":"2025-02-17T09:49:43.971461Z","shell.execute_reply.started":"2025-02-17T09:41:15.384969Z","shell.execute_reply":"2025-02-17T09:49:43.970201Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"accuracy\n\ttraining         \t (min:    0.981, max:    0.988, cur:    0.988)\n\tvalidation       \t (min:    0.987, max:    0.989, cur:    0.989)\nLoss\n\ttraining         \t (min:    0.041, max:    0.081, cur:    0.041)\n\tvalidation       \t (min:    0.037, max:    0.043, cur:    0.037)\n\u001b[1m1080/1080\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m248s\u001b[0m 230ms/step - accuracy: 0.9874 - loss: 0.0428 - val_accuracy: 0.9889 - val_loss: 0.0372\nRestoring model weights from the end of the best epoch: 2.\n","output_type":"stream"}],"execution_count":45},{"cell_type":"markdown","source":"## 10. Evaluate the Model","metadata":{}},{"cell_type":"code","source":"model.evaluate(x_test, np.array(y_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T09:50:11.215495Z","iopub.execute_input":"2025-02-17T09:50:11.215930Z","iopub.status.idle":"2025-02-17T09:50:20.026549Z","shell.execute_reply.started":"2025-02-17T09:50:11.215898Z","shell.execute_reply":"2025-02-17T09:50:20.025532Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m150/150\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 58ms/step - accuracy: 0.9889 - loss: 0.0368\n","output_type":"stream"},{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"[0.03721048682928085, 0.9887967109680176]"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}