{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1fd1f2c3",
   "metadata": {
    "papermill": {
     "duration": 0.009832,
     "end_time": "2025-02-17T09:52:02.042770",
     "exception": false,
     "start_time": "2025-02-17T09:52:02.032938",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Using Word2Vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "516f5e66",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:02.065440Z",
     "iopub.status.busy": "2025-02-17T09:52:02.065068Z",
     "iopub.status.idle": "2025-02-17T09:52:03.127901Z",
     "shell.execute_reply": "2025-02-17T09:52:03.126525Z"
    },
    "papermill": {
     "duration": 1.076734,
     "end_time": "2025-02-17T09:52:03.129789",
     "exception": false,
     "start_time": "2025-02-17T09:52:02.053055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/entity-annotated-corpus/ner.csv\n",
      "/kaggle/input/entity-annotated-corpus/ner_dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "25bd5a57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:03.150871Z",
     "iopub.status.busy": "2025-02-17T09:52:03.150253Z",
     "iopub.status.idle": "2025-02-17T09:52:19.500598Z",
     "shell.execute_reply": "2025-02-17T09:52:19.499420Z"
    },
    "papermill": {
     "duration": 16.363043,
     "end_time": "2025-02-17T09:52:19.502591",
     "exception": false,
     "start_time": "2025-02-17T09:52:03.139548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensorflow version: 2.17.1\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "np.random.seed(0)\n",
    "plt.style.use(\"ggplot\")\n",
    "\n",
    "import tensorflow as tf\n",
    "print('Tensorflow version:', tf.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "30db5421",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:19.523743Z",
     "iopub.status.busy": "2025-02-17T09:52:19.523069Z",
     "iopub.status.idle": "2025-02-17T09:52:19.528833Z",
     "shell.execute_reply": "2025-02-17T09:52:19.527699Z"
    },
    "papermill": {
     "duration": 0.018075,
     "end_time": "2025-02-17T09:52:19.530611",
     "exception": false,
     "start_time": "2025-02-17T09:52:19.512536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['entity-annotated-corpus']\n"
     ]
    }
   ],
   "source": [
    "print(os.listdir('../input'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e63ddae7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:19.550993Z",
     "iopub.status.busy": "2025-02-17T09:52:19.550587Z",
     "iopub.status.idle": "2025-02-17T09:52:19.558577Z",
     "shell.execute_reply": "2025-02-17T09:52:19.557388Z"
    },
    "papermill": {
     "duration": 0.020233,
     "end_time": "2025-02-17T09:52:19.560335",
     "exception": false,
     "start_time": "2025-02-17T09:52:19.540102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Distribution graphs (histogram/bar graph) of column data\n",
    "def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n",
    "    nunique = df.nunique()\n",
    "    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n",
    "    nRow, nCol = df.shape\n",
    "    columnNames = list(df)\n",
    "    nGraphRow = (nCol + nGraphPerRow - 1) / nGraphPerRow\n",
    "    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n",
    "    for i in range(min(nCol, nGraphShown)):\n",
    "        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n",
    "        columnDf = df.iloc[:, i]\n",
    "        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n",
    "            valueCounts = columnDf.value_counts()\n",
    "            valueCounts.plot.bar()\n",
    "        else:\n",
    "            columnDf.hist()\n",
    "        plt.ylabel('counts')\n",
    "        plt.xticks(rotation = 90)\n",
    "        plt.title(f'{columnNames[i]} (column {i})')\n",
    "    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2426d030",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:19.582241Z",
     "iopub.status.busy": "2025-02-17T09:52:19.581681Z",
     "iopub.status.idle": "2025-02-17T09:52:19.589076Z",
     "shell.execute_reply": "2025-02-17T09:52:19.587717Z"
    },
    "papermill": {
     "duration": 0.020597,
     "end_time": "2025-02-17T09:52:19.590812",
     "exception": false,
     "start_time": "2025-02-17T09:52:19.570215",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Correlation matrix\n",
    "def plotCorrelationMatrix(df, graphWidth):\n",
    "    filename = df.dataframeName\n",
    "    df = df.dropna('columns') # drop columns with NaN\n",
    "    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n",
    "    if df.shape[1] < 2:\n",
    "        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n",
    "        return\n",
    "    corr = df.corr()\n",
    "    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n",
    "    corrMat = plt.matshow(corr, fignum = 1)\n",
    "    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n",
    "    plt.yticks(range(len(corr.columns)), corr.columns)\n",
    "    plt.gca().xaxis.tick_bottom()\n",
    "    plt.colorbar(corrMat)\n",
    "    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f5a7030d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:19.610565Z",
     "iopub.status.busy": "2025-02-17T09:52:19.610175Z",
     "iopub.status.idle": "2025-02-17T09:52:19.617050Z",
     "shell.execute_reply": "2025-02-17T09:52:19.616066Z"
    },
    "papermill": {
     "duration": 0.018744,
     "end_time": "2025-02-17T09:52:19.618867",
     "exception": false,
     "start_time": "2025-02-17T09:52:19.600123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scatter and density plots\n",
    "def plotScatterMatrix(df, plotSize, textSize):\n",
    "    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n",
    "    # Remove rows and columns that would lead to df being singular\n",
    "    df = df.dropna('columns')\n",
    "    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n",
    "    columnNames = list(df)\n",
    "    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n",
    "        columnNames = columnNames[:10]\n",
    "    df = df[columnNames]\n",
    "    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n",
    "    corrs = df.corr().values\n",
    "    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n",
    "        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n",
    "    plt.suptitle('Scatter and Density Plot')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bef693c3",
   "metadata": {
    "papermill": {
     "duration": 0.008838,
     "end_time": "2025-02-17T09:52:19.637006",
     "exception": false,
     "start_time": "2025-02-17T09:52:19.628168",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Dataset Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a57c9781",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:19.656697Z",
     "iopub.status.busy": "2025-02-17T09:52:19.656351Z",
     "iopub.status.idle": "2025-02-17T09:52:20.361051Z",
     "shell.execute_reply": "2025-02-17T09:52:20.359646Z"
    },
    "papermill": {
     "duration": 0.716836,
     "end_time": "2025-02-17T09:52:20.363041",
     "exception": false,
     "start_time": "2025-02-17T09:52:19.646205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 1048575 rows and 4 columns\n"
     ]
    }
   ],
   "source": [
    "nRowsRead = None # specify 'None' if want to read whole file\n",
    "# ner_dataset.csv may have more rows in reality, but we are only loading/previewing the first 1000 rows\n",
    "df2 = pd.read_csv('/kaggle/input/entity-annotated-corpus/ner_dataset.csv', delimiter=',', nrows = nRowsRead, encoding='cp1252')\n",
    "df2.dataframeName = 'ner_dataset.csv'\n",
    "nRow, nCol = df2.shape\n",
    "print(f'There are {nRow} rows and {nCol} columns')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "511360b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:20.384011Z",
     "iopub.status.busy": "2025-02-17T09:52:20.383613Z",
     "iopub.status.idle": "2025-02-17T09:52:20.408684Z",
     "shell.execute_reply": "2025-02-17T09:52:20.407590Z"
    },
    "papermill": {
     "duration": 0.038161,
     "end_time": "2025-02-17T09:52:20.410799",
     "exception": false,
     "start_time": "2025-02-17T09:52:20.372638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sentence #</th>\n",
       "      <th>Word</th>\n",
       "      <th>POS</th>\n",
       "      <th>Tag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sentence: 1</td>\n",
       "      <td>Thousands</td>\n",
       "      <td>NNS</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>of</td>\n",
       "      <td>IN</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>demonstrators</td>\n",
       "      <td>NNS</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>have</td>\n",
       "      <td>VBP</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>marched</td>\n",
       "      <td>VBN</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>through</td>\n",
       "      <td>IN</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>London</td>\n",
       "      <td>NNP</td>\n",
       "      <td>B-geo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>to</td>\n",
       "      <td>TO</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>protest</td>\n",
       "      <td>VB</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "      <td>the</td>\n",
       "      <td>DT</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Sentence #           Word  POS    Tag\n",
       "0  Sentence: 1      Thousands  NNS      O\n",
       "1          NaN             of   IN      O\n",
       "2          NaN  demonstrators  NNS      O\n",
       "3          NaN           have  VBP      O\n",
       "4          NaN        marched  VBN      O\n",
       "5          NaN        through   IN      O\n",
       "6          NaN         London  NNP  B-geo\n",
       "7          NaN             to   TO      O\n",
       "8          NaN        protest   VB      O\n",
       "9          NaN            the   DT      O"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e445e8e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:20.431945Z",
     "iopub.status.busy": "2025-02-17T09:52:20.431565Z",
     "iopub.status.idle": "2025-02-17T09:52:20.502402Z",
     "shell.execute_reply": "2025-02-17T09:52:20.500906Z"
    },
    "papermill": {
     "duration": 0.083522,
     "end_time": "2025-02-17T09:52:20.504304",
     "exception": false,
     "start_time": "2025-02-17T09:52:20.420782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label distribution Training set:\n",
      "Tag\n",
      "O        887908\n",
      "B-geo     37644\n",
      "B-tim     20333\n",
      "B-org     20143\n",
      "I-per     17251\n",
      "B-per     16990\n",
      "I-org     16784\n",
      "B-gpe     15870\n",
      "I-geo      7414\n",
      "I-tim      6528\n",
      "B-art       402\n",
      "B-eve       308\n",
      "I-art       297\n",
      "I-eve       253\n",
      "B-nat       201\n",
      "I-gpe       198\n",
      "I-nat        51\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print('Label distribution Training set:')\n",
    "print(df2['Tag'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2ac8c115",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:20.524807Z",
     "iopub.status.busy": "2025-02-17T09:52:20.524450Z",
     "iopub.status.idle": "2025-02-17T09:52:20.722177Z",
     "shell.execute_reply": "2025-02-17T09:52:20.721180Z"
    },
    "papermill": {
     "duration": 0.210031,
     "end_time": "2025-02-17T09:52:20.724140",
     "exception": false,
     "start_time": "2025-02-17T09:52:20.514109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sentence #    1000616\n",
       "Word               10\n",
       "POS                 0\n",
       "Tag                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "79819057",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:20.745075Z",
     "iopub.status.busy": "2025-02-17T09:52:20.744694Z",
     "iopub.status.idle": "2025-02-17T09:52:21.320969Z",
     "shell.execute_reply": "2025-02-17T09:52:21.319577Z"
    },
    "papermill": {
     "duration": 0.588857,
     "end_time": "2025-02-17T09:52:21.322808",
     "exception": false,
     "start_time": "2025-02-17T09:52:20.733951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-11-50e2ff2a5196>:4: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  df=df2.fillna(method='ffill')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sentence #</th>\n",
       "      <th>Word</th>\n",
       "      <th>POS</th>\n",
       "      <th>Tag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sentence: 1</td>\n",
       "      <td>Thousands</td>\n",
       "      <td>NNS</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sentence: 1</td>\n",
       "      <td>of</td>\n",
       "      <td>IN</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sentence: 1</td>\n",
       "      <td>demonstrators</td>\n",
       "      <td>NNS</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sentence: 1</td>\n",
       "      <td>have</td>\n",
       "      <td>VBP</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sentence: 1</td>\n",
       "      <td>marched</td>\n",
       "      <td>VBN</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Sentence #           Word  POS Tag\n",
       "0  Sentence: 1      Thousands  NNS   O\n",
       "1  Sentence: 1             of   IN   O\n",
       "2  Sentence: 1  demonstrators  NNS   O\n",
       "3  Sentence: 1           have  VBP   O\n",
       "4  Sentence: 1        marched  VBN   O"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looking at the dataset here we will use ffill feature to fill the null values.\n",
    "#Forward-fills missing values in the Sentence # column.\n",
    "#Ensures every word is correctly assigned to a sentence.\n",
    "df=df2.fillna(method='ffill')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6bc0a266",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:21.347986Z",
     "iopub.status.busy": "2025-02-17T09:52:21.347580Z",
     "iopub.status.idle": "2025-02-17T09:52:21.595266Z",
     "shell.execute_reply": "2025-02-17T09:52:21.594104Z"
    },
    "papermill": {
     "duration": 0.262369,
     "end_time": "2025-02-17T09:52:21.597277",
     "exception": false,
     "start_time": "2025-02-17T09:52:21.334908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sentence #    0\n",
       "Word          0\n",
       "POS           0\n",
       "Tag           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcbbba80",
   "metadata": {
    "papermill": {
     "duration": 0.010168,
     "end_time": "2025-02-17T09:52:21.617618",
     "exception": false,
     "start_time": "2025-02-17T09:52:21.607450",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Extracting Words and Tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3678000d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:21.638911Z",
     "iopub.status.busy": "2025-02-17T09:52:21.638541Z",
     "iopub.status.idle": "2025-02-17T09:52:21.700889Z",
     "shell.execute_reply": "2025-02-17T09:52:21.699839Z"
    },
    "papermill": {
     "duration": 0.075009,
     "end_time": "2025-02-17T09:52:21.702646",
     "exception": false,
     "start_time": "2025-02-17T09:52:21.627637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_tags=df['Tag'].nunique()\n",
    "n_tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "98f3f2d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:21.724346Z",
     "iopub.status.busy": "2025-02-17T09:52:21.723990Z",
     "iopub.status.idle": "2025-02-17T09:52:21.842412Z",
     "shell.execute_reply": "2025-02-17T09:52:21.841297Z"
    },
    "papermill": {
     "duration": 0.131414,
     "end_time": "2025-02-17T09:52:21.844479",
     "exception": false,
     "start_time": "2025-02-17T09:52:21.713065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35177"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_words=df['Word'].nunique()\n",
    "n_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f583f943",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:21.868074Z",
     "iopub.status.busy": "2025-02-17T09:52:21.867686Z",
     "iopub.status.idle": "2025-02-17T09:52:22.092913Z",
     "shell.execute_reply": "2025-02-17T09:52:22.091749Z"
    },
    "papermill": {
     "duration": 0.239068,
     "end_time": "2025-02-17T09:52:22.095039",
     "exception": false,
     "start_time": "2025-02-17T09:52:21.855971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "words=list(set(df['Word']))\n",
    "n_words=len(words)\n",
    "tags=list(set(df['Tag']))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9ed682e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:22.117033Z",
     "iopub.status.busy": "2025-02-17T09:52:22.116636Z",
     "iopub.status.idle": "2025-02-17T09:52:22.122499Z",
     "shell.execute_reply": "2025-02-17T09:52:22.121392Z"
    },
    "papermill": {
     "duration": 0.018741,
     "end_time": "2025-02-17T09:52:22.124169",
     "exception": false,
     "start_time": "2025-02-17T09:52:22.105428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'disinfected'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "words[10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3a05305d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:22.146159Z",
     "iopub.status.busy": "2025-02-17T09:52:22.145738Z",
     "iopub.status.idle": "2025-02-17T09:52:22.152073Z",
     "shell.execute_reply": "2025-02-17T09:52:22.150833Z"
    },
    "papermill": {
     "duration": 0.019438,
     "end_time": "2025-02-17T09:52:22.154019",
     "exception": false,
     "start_time": "2025-02-17T09:52:22.134581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_tags=len(tags)\n",
    "n_tags"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32c58f05",
   "metadata": {
    "papermill": {
     "duration": 0.009918,
     "end_time": "2025-02-17T09:52:22.174511",
     "exception": false,
     "start_time": "2025-02-17T09:52:22.164593",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. Converting data into sentences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "aa14c1b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:22.196535Z",
     "iopub.status.busy": "2025-02-17T09:52:22.196132Z",
     "iopub.status.idle": "2025-02-17T09:52:22.202489Z",
     "shell.execute_reply": "2025-02-17T09:52:22.200974Z"
    },
    "papermill": {
     "duration": 0.019592,
     "end_time": "2025-02-17T09:52:22.204378",
     "exception": false,
     "start_time": "2025-02-17T09:52:22.184786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class GetSentence(object):\n",
    "    def __init__(self, data):\n",
    "        self.n_sentence=1\n",
    "        self.data=data\n",
    "        self.empty = False\n",
    "        function=lambda d:[(w, p, t) for w, p, t in zip(d[\"Word\"].values.tolist(),\n",
    "                                                        d[\"POS\"].values.tolist(),\n",
    "                                                        d[\"Tag\"].values.tolist())]\n",
    "        \n",
    "        self.group_sent = self.data.groupby(\"Sentence #\").apply(function)\n",
    "        self.all_sentences = [d for d in self.group_sent] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d0fe42e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:22.227019Z",
     "iopub.status.busy": "2025-02-17T09:52:22.226620Z",
     "iopub.status.idle": "2025-02-17T09:52:27.615067Z",
     "shell.execute_reply": "2025-02-17T09:52:27.613816Z"
    },
    "papermill": {
     "duration": 5.401538,
     "end_time": "2025-02-17T09:52:27.616754",
     "exception": false,
     "start_time": "2025-02-17T09:52:22.215216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-18-afd3a31f9fc4>:10: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  self.group_sent = self.data.groupby(\"Sentence #\").apply(function)\n"
     ]
    }
   ],
   "source": [
    "get=GetSentence(df)\n",
    "sentences=get.all_sentences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "61302fcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:27.639279Z",
     "iopub.status.busy": "2025-02-17T09:52:27.638925Z",
     "iopub.status.idle": "2025-02-17T09:52:27.646589Z",
     "shell.execute_reply": "2025-02-17T09:52:27.645441Z"
    },
    "papermill": {
     "duration": 0.021084,
     "end_time": "2025-02-17T09:52:27.648473",
     "exception": false,
     "start_time": "2025-02-17T09:52:27.627389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Thousands', 'NNS', 'O'),\n",
       " ('of', 'IN', 'O'),\n",
       " ('demonstrators', 'NNS', 'O'),\n",
       " ('have', 'VBP', 'O'),\n",
       " ('marched', 'VBN', 'O'),\n",
       " ('through', 'IN', 'O'),\n",
       " ('London', 'NNP', 'B-geo'),\n",
       " ('to', 'TO', 'O'),\n",
       " ('protest', 'VB', 'O'),\n",
       " ('the', 'DT', 'O'),\n",
       " ('war', 'NN', 'O'),\n",
       " ('in', 'IN', 'O'),\n",
       " ('Iraq', 'NNP', 'B-geo'),\n",
       " ('and', 'CC', 'O'),\n",
       " ('demand', 'VB', 'O'),\n",
       " ('the', 'DT', 'O'),\n",
       " ('withdrawal', 'NN', 'O'),\n",
       " ('of', 'IN', 'O'),\n",
       " ('British', 'JJ', 'B-gpe'),\n",
       " ('troops', 'NNS', 'O'),\n",
       " ('from', 'IN', 'O'),\n",
       " ('that', 'DT', 'O'),\n",
       " ('country', 'NN', 'O'),\n",
       " ('.', '.', 'O')]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentences[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3a88fc2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:27.671280Z",
     "iopub.status.busy": "2025-02-17T09:52:27.670925Z",
     "iopub.status.idle": "2025-02-17T09:52:27.676712Z",
     "shell.execute_reply": "2025-02-17T09:52:27.675639Z"
    },
    "papermill": {
     "duration": 0.01943,
     "end_time": "2025-02-17T09:52:27.678470",
     "exception": false,
     "start_time": "2025-02-17T09:52:27.659040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "47959"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(sentences)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7fb6f80d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:27.701377Z",
     "iopub.status.busy": "2025-02-17T09:52:27.701017Z",
     "iopub.status.idle": "2025-02-17T09:52:27.715963Z",
     "shell.execute_reply": "2025-02-17T09:52:27.714428Z"
    },
    "papermill": {
     "duration": 0.028261,
     "end_time": "2025-02-17T09:52:27.717726",
     "exception": false,
     "start_time": "2025-02-17T09:52:27.689465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maximum sequence length in the list of sentences: 104\n"
     ]
    }
   ],
   "source": [
    "maxl = max([len(s) for s in sentences])\n",
    "print ('Maximum sequence length in the list of sentences:', maxl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "082aca33",
   "metadata": {
    "papermill": {
     "duration": 0.010836,
     "end_time": "2025-02-17T09:52:27.739255",
     "exception": false,
     "start_time": "2025-02-17T09:52:27.728419",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4. Create word and tag indexing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9ce22799",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:27.762827Z",
     "iopub.status.busy": "2025-02-17T09:52:27.762449Z",
     "iopub.status.idle": "2025-02-17T09:52:27.778299Z",
     "shell.execute_reply": "2025-02-17T09:52:27.777333Z"
    },
    "papermill": {
     "duration": 0.029805,
     "end_time": "2025-02-17T09:52:27.780152",
     "exception": false,
     "start_time": "2025-02-17T09:52:27.750347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "w_index={w:i for i,w in enumerate(words)}\n",
    "t_index={t:j for j,t in enumerate(tags)}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c447fab",
   "metadata": {
    "papermill": {
     "duration": 0.010466,
     "end_time": "2025-02-17T09:52:27.802512",
     "exception": false,
     "start_time": "2025-02-17T09:52:27.792046",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4. Train word2vec model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2f29ff72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:52:27.825752Z",
     "iopub.status.busy": "2025-02-17T09:52:27.825393Z",
     "iopub.status.idle": "2025-02-17T09:53:03.054035Z",
     "shell.execute_reply": "2025-02-17T09:53:03.052878Z"
    },
    "papermill": {
     "duration": 35.24286,
     "end_time": "2025-02-17T09:53:03.056184",
     "exception": false,
     "start_time": "2025-02-17T09:52:27.813324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from gensim.models import Word2Vec\n",
    "\n",
    "# Prepare the dataset for Word2Vec training (list of tokenized sentences)\n",
    "sentences_w2v = [[w[0] for w in s] for s in sentences]  # Extract words from your dataset\n",
    "\n",
    "# Train a Word2Vec model\n",
    "word2vec_model = Word2Vec(sentences=sentences_w2v, vector_size=100, window=5, min_count=1, workers=4)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2a717d0",
   "metadata": {
    "papermill": {
     "duration": 0.010906,
     "end_time": "2025-02-17T09:53:03.079304",
     "exception": false,
     "start_time": "2025-02-17T09:53:03.068398",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5. Convert labels into indixes and apply padding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0731664c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:03.102304Z",
     "iopub.status.busy": "2025-02-17T09:53:03.101631Z",
     "iopub.status.idle": "2025-02-17T09:53:03.195486Z",
     "shell.execute_reply": "2025-02-17T09:53:03.194393Z"
    },
    "papermill": {
     "duration": 0.107473,
     "end_time": "2025-02-17T09:53:03.197435",
     "exception": false,
     "start_time": "2025-02-17T09:53:03.089962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "de12076e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:03.220744Z",
     "iopub.status.busy": "2025-02-17T09:53:03.220280Z",
     "iopub.status.idle": "2025-02-17T09:53:03.226693Z",
     "shell.execute_reply": "2025-02-17T09:53:03.225675Z"
    },
    "papermill": {
     "duration": 0.02013,
     "end_time": "2025-02-17T09:53:03.228647",
     "exception": false,
     "start_time": "2025-02-17T09:53:03.208517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "104"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maxl # This is the length of longest sequence in the list of sentences. So this should be our size of max_padding\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d244984f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:03.259971Z",
     "iopub.status.busy": "2025-02-17T09:53:03.259475Z",
     "iopub.status.idle": "2025-02-17T09:53:03.527387Z",
     "shell.execute_reply": "2025-02-17T09:53:03.526303Z"
    },
    "papermill": {
     "duration": 0.281642,
     "end_time": "2025-02-17T09:53:03.529311",
     "exception": false,
     "start_time": "2025-02-17T09:53:03.247669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X=[[w_index[w[0]]for w in s]for s in sentences]\n",
    "#Converts each word in a sentence into its corresponding index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7844b3e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:03.552591Z",
     "iopub.status.busy": "2025-02-17T09:53:03.552190Z",
     "iopub.status.idle": "2025-02-17T09:53:03.743596Z",
     "shell.execute_reply": "2025-02-17T09:53:03.742538Z"
    },
    "papermill": {
     "duration": 0.205498,
     "end_time": "2025-02-17T09:53:03.745633",
     "exception": false,
     "start_time": "2025-02-17T09:53:03.540135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[17214, 31922,  5469, ...,     0,     0,     0],\n",
       "       [23660, 10442, 13850, ...,     0,     0,     0],\n",
       "       [24855, 15893, 18946, ...,     0,     0,     0],\n",
       "       ...,\n",
       "       [26036,  9786, 20691, ...,     0,     0,     0],\n",
       "       [ 5588,   868,     6, ...,     0,     0,     0],\n",
       "       [ 9916, 23404, 17935, ...,     0,     0,     0]], dtype=int32)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X=pad_sequences(maxlen=maxl,padding='post',sequences=X)\n",
    "#Pads sentences to maxl length using post-padding (adds zeros at the end).\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a85c9763",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:03.769790Z",
     "iopub.status.busy": "2025-02-17T09:53:03.769387Z",
     "iopub.status.idle": "2025-02-17T09:53:04.295784Z",
     "shell.execute_reply": "2025-02-17T09:53:04.294635Z"
    },
    "papermill": {
     "duration": 0.540251,
     "end_time": "2025-02-17T09:53:04.297794",
     "exception": false,
     "start_time": "2025-02-17T09:53:03.757543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Y = [[t_index[w[2]] for w in s] for s in sentences]\n",
    "#Converts NER tags to indexed format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1037b015",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:04.379190Z",
     "iopub.status.busy": "2025-02-17T09:53:04.378785Z",
     "iopub.status.idle": "2025-02-17T09:53:04.556005Z",
     "shell.execute_reply": "2025-02-17T09:53:04.554943Z"
    },
    "papermill": {
     "duration": 0.191446,
     "end_time": "2025-02-17T09:53:04.557910",
     "exception": false,
     "start_time": "2025-02-17T09:53:04.366464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  0, 11,\n",
       "       11, 11,  9, 11, 11, 11, 11, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
       "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
       "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
       "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
       "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
       "        0,  0], dtype=int32)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y=pad_sequences(maxlen=maxl,padding='post',sequences=Y)\n",
    "#Pads labels similarly.\n",
    "Y[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8400a8c3",
   "metadata": {
    "papermill": {
     "duration": 0.011188,
     "end_time": "2025-02-17T09:53:04.580250",
     "exception": false,
     "start_time": "2025-02-17T09:53:04.569062",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Convert labels into One-Hot Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a1070604",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:04.604345Z",
     "iopub.status.busy": "2025-02-17T09:53:04.603904Z",
     "iopub.status.idle": "2025-02-17T09:53:05.235579Z",
     "shell.execute_reply": "2025-02-17T09:53:05.234228Z"
    },
    "papermill": {
     "duration": 0.646384,
     "end_time": "2025-02-17T09:53:05.237616",
     "exception": false,
     "start_time": "2025-02-17T09:53:04.591232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "Y = to_categorical(Y, num_classes=n_tags)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97eef36d",
   "metadata": {
    "papermill": {
     "duration": 0.011001,
     "end_time": "2025-02-17T09:53:05.259993",
     "exception": false,
     "start_time": "2025-02-17T09:53:05.248992",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6. Splitting train-test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "206df421",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:05.283241Z",
     "iopub.status.busy": "2025-02-17T09:53:05.282871Z",
     "iopub.status.idle": "2025-02-17T09:53:05.879414Z",
     "shell.execute_reply": "2025-02-17T09:53:05.878292Z"
    },
    "papermill": {
     "duration": 0.610481,
     "end_time": "2025-02-17T09:53:05.881390",
     "exception": false,
     "start_time": "2025-02-17T09:53:05.270909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.1,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9823e7c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:05.906030Z",
     "iopub.status.busy": "2025-02-17T09:53:05.905618Z",
     "iopub.status.idle": "2025-02-17T09:53:05.911729Z",
     "shell.execute_reply": "2025-02-17T09:53:05.910668Z"
    },
    "papermill": {
     "duration": 0.020007,
     "end_time": "2025-02-17T09:53:05.913592",
     "exception": false,
     "start_time": "2025-02-17T09:53:05.893585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(43163, 104) (43163, 104, 17)\n",
      "\n",
      "(4796, 104) (4796, 104, 17)\n"
     ]
    }
   ],
   "source": [
    "print(x_train.shape, y_train.shape)\n",
    "print()\n",
    "print(x_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4f2fca8",
   "metadata": {
    "papermill": {
     "duration": 0.011372,
     "end_time": "2025-02-17T09:53:05.936117",
     "exception": false,
     "start_time": "2025-02-17T09:53:05.924745",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 7. Create an Embedding Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4e3a96ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:05.959738Z",
     "iopub.status.busy": "2025-02-17T09:53:05.959388Z",
     "iopub.status.idle": "2025-02-17T09:53:06.109126Z",
     "shell.execute_reply": "2025-02-17T09:53:06.107879Z"
    },
    "papermill": {
     "duration": 0.164045,
     "end_time": "2025-02-17T09:53:06.111221",
     "exception": false,
     "start_time": "2025-02-17T09:53:05.947176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "embedding_dim = 100  # If using a pretrained model like Google News, set to 300\n",
    "\n",
    "# Create an embedding matrix\n",
    "embedding_matrix = np.zeros((n_words, embedding_dim))  # Initialize a matrix with zeros\n",
    "\n",
    "for word, i in w_index.items():  \n",
    "    if word in word2vec_model.wv:  # Check if word exists in Word2Vec vocabulary\n",
    "        embedding_matrix[i] = word2vec_model.wv[word]  # Assign its word vector\n",
    "    else:\n",
    "        embedding_matrix[i] = np.random.uniform(-0.01, 0.01, embedding_dim)  # Assign random vector if word is not found\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13b07b4f",
   "metadata": {
    "papermill": {
     "duration": 0.01051,
     "end_time": "2025-02-17T09:53:06.132820",
     "exception": false,
     "start_time": "2025-02-17T09:53:06.122310",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 8. BiLSTM Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ac61f9ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:06.156873Z",
     "iopub.status.busy": "2025-02-17T09:53:06.156464Z",
     "iopub.status.idle": "2025-02-17T09:53:06.396173Z",
     "shell.execute_reply": "2025-02-17T09:53:06.395134Z"
    },
    "papermill": {
     "duration": 0.253742,
     "end_time": "2025-02-17T09:53:06.398123",
     "exception": false,
     "start_time": "2025-02-17T09:53:06.144381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"functional\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">3,517,700</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ spatial_dropout1d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SpatialDropout1D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ bidirectional (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">301,200</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ time_distributed (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">104</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">17</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">5,117</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m, \u001b[38;5;34m100\u001b[0m)            │       \u001b[38;5;34m3,517,700\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ spatial_dropout1d (\u001b[38;5;33mSpatialDropout1D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m, \u001b[38;5;34m100\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ bidirectional (\u001b[38;5;33mBidirectional\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m, \u001b[38;5;34m300\u001b[0m)            │         \u001b[38;5;34m301,200\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ time_distributed (\u001b[38;5;33mTimeDistributed\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m104\u001b[0m, \u001b[38;5;34m17\u001b[0m)             │           \u001b[38;5;34m5,117\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,824,017</span> (14.59 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m3,824,017\u001b[0m (14.59 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">306,317</span> (1.17 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m306,317\u001b[0m (1.17 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,517,700</span> (13.42 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m3,517,700\u001b[0m (13.42 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow.keras.layers import Embedding, LSTM, Dense, TimeDistributed, SpatialDropout1D, Bidirectional\n",
    "from tensorflow.keras import Model, Input\n",
    "\n",
    "input_layer = Input(shape=(maxl,))\n",
    "\n",
    "# Load Word2Vec embeddings\n",
    "embedding_layer = Embedding(input_dim=n_words,\n",
    "                            output_dim=embedding_dim,\n",
    "                            input_length=maxl,\n",
    "                            weights=[embedding_matrix],\n",
    "                            trainable=False)(input_layer)\n",
    "\n",
    "dropout_layer = SpatialDropout1D(0.1)(embedding_layer)\n",
    "lstm_layer = Bidirectional(LSTM(units=150, return_sequences=True, recurrent_dropout=0.1))(dropout_layer)\n",
    "output_layer = TimeDistributed(Dense(n_tags, activation=\"softmax\"))(lstm_layer)\n",
    "\n",
    "model = Model(input_layer, output_layer)\n",
    "\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "553a107c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:39:20.696637Z",
     "iopub.status.busy": "2025-02-17T09:39:20.696209Z",
     "iopub.status.idle": "2025-02-17T09:39:20.706142Z",
     "shell.execute_reply": "2025-02-17T09:39:20.705168Z",
     "shell.execute_reply.started": "2025-02-17T09:39:20.696601Z"
    },
    "papermill": {
     "duration": 0.01178,
     "end_time": "2025-02-17T09:53:06.421896",
     "exception": false,
     "start_time": "2025-02-17T09:53:06.410116",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "dc82be36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T08:54:53.522398Z",
     "iopub.status.busy": "2025-02-17T08:54:53.522076Z",
     "iopub.status.idle": "2025-02-17T08:54:53.768670Z",
     "shell.execute_reply": "2025-02-17T08:54:53.767883Z",
     "shell.execute_reply.started": "2025-02-17T08:54:53.522376Z"
    },
    "papermill": {
     "duration": 0.011372,
     "end_time": "2025-02-17T09:53:06.444936",
     "exception": false,
     "start_time": "2025-02-17T09:53:06.433564",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 9. Train the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f9acd2e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:06.469938Z",
     "iopub.status.busy": "2025-02-17T09:53:06.469528Z",
     "iopub.status.idle": "2025-02-17T09:53:12.401779Z",
     "shell.execute_reply": "2025-02-17T09:53:12.400177Z"
    },
    "papermill": {
     "duration": 5.946909,
     "end_time": "2025-02-17T09:53:12.403659",
     "exception": false,
     "start_time": "2025-02-17T09:53:06.456750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting livelossplot\r\n",
      "  Downloading livelossplot-0.5.6-py3-none-any.whl.metadata (8.9 kB)\r\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from livelossplot) (3.7.5)\r\n",
      "Requirement already satisfied: bokeh in /usr/local/lib/python3.10/dist-packages (from livelossplot) (3.6.2)\r\n",
      "Requirement already satisfied: Jinja2>=2.9 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (3.1.4)\r\n",
      "Requirement already satisfied: contourpy>=1.2 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (1.3.1)\r\n",
      "Requirement already satisfied: numpy>=1.16 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=16.8 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (24.2)\r\n",
      "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (2.2.3)\r\n",
      "Requirement already satisfied: pillow>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (11.0.0)\r\n",
      "Requirement already satisfied: PyYAML>=3.10 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (6.0.2)\r\n",
      "Requirement already satisfied: tornado>=6.2 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (6.3.3)\r\n",
      "Requirement already satisfied: xyzservices>=2021.09.1 in /usr/local/lib/python3.10/dist-packages (from bokeh->livelossplot) (2024.9.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (4.55.3)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (1.4.7)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (3.2.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->livelossplot) (2.9.0.post0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=2.9->bokeh->livelossplot) (3.0.2)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.16->bokeh->livelossplot) (2.4.1)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->bokeh->livelossplot) (2025.1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->bokeh->livelossplot) (2025.1)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->livelossplot) (1.17.0)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.16->bokeh->livelossplot) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.16->bokeh->livelossplot) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.16->bokeh->livelossplot) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.16->bokeh->livelossplot) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.16->bokeh->livelossplot) (2024.2.0)\r\n",
      "Downloading livelossplot-0.5.6-py3-none-any.whl (23 kB)\r\n",
      "Installing collected packages: livelossplot\r\n",
      "Successfully installed livelossplot-0.5.6\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install livelossplot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "70548153",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T09:53:12.430690Z",
     "iopub.status.busy": "2025-02-17T09:53:12.430290Z",
     "iopub.status.idle": "2025-02-17T10:02:06.786007Z",
     "shell.execute_reply": "2025-02-17T10:02:06.784686Z"
    },
    "papermill": {
     "duration": 534.371689,
     "end_time": "2025-02-17T10:02:06.788171",
     "exception": false,
     "start_time": "2025-02-17T09:53:12.416482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy\n",
      "\ttraining         \t (min:    0.980, max:    0.988, cur:    0.988)\n",
      "\tvalidation       \t (min:    0.987, max:    0.989, cur:    0.989)\n",
      "Loss\n",
      "\ttraining         \t (min:    0.042, max:    0.077, cur:    0.042)\n",
      "\tvalidation       \t (min:    0.037, max:    0.044, cur:    0.037)\n",
      "\u001b[1m1080/1080\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m266s\u001b[0m 247ms/step - accuracy: 0.9870 - loss: 0.0439 - val_accuracy: 0.9888 - val_loss: 0.0374\n",
      "Restoring model weights from the end of the best epoch: 2.\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n",
    "from livelossplot.tf_keras import PlotLossesCallback\n",
    "early_stop = EarlyStopping(monitor='val_accuracy', patience=1, verbose=1, mode='max', restore_best_weights=True)\n",
    "callbacks = [PlotLossesCallback(), early_stop]\n",
    "\n",
    "history = model.fit(x_train, np.array(y_train), validation_split=0.2, batch_size=32, epochs=2, verbose=1, callbacks=callbacks)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cda08ef2",
   "metadata": {
    "papermill": {
     "duration": 0.014451,
     "end_time": "2025-02-17T10:02:06.817630",
     "exception": false,
     "start_time": "2025-02-17T10:02:06.803179",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 10. Evaluate the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4fed93b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T10:02:06.849101Z",
     "iopub.status.busy": "2025-02-17T10:02:06.848664Z",
     "iopub.status.idle": "2025-02-17T10:02:15.522470Z",
     "shell.execute_reply": "2025-02-17T10:02:15.520952Z"
    },
    "papermill": {
     "duration": 8.692309,
     "end_time": "2025-02-17T10:02:15.525076",
     "exception": false,
     "start_time": "2025-02-17T10:02:06.832767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m150/150\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 57ms/step - accuracy: 0.9888 - loss: 0.0371\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.03757072612643242, 0.9887265563011169]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(x_test, np.array(y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4fe08e16",
   "metadata": {
    "papermill": {
     "duration": 0.025453,
     "end_time": "2025-02-17T10:02:15.581899",
     "exception": false,
     "start_time": "2025-02-17T10:02:15.556446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1014,
     "sourceId": 4361,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30886,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 619.193665,
   "end_time": "2025-02-17T10:02:18.330816",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-17T09:51:59.137151",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
